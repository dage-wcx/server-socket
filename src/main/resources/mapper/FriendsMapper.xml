<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.serversocket.dao.FriendsMapper">
    <resultMap id="BaseResultMap" type="com.serversocket.entity.Friends">
        <constructor>
            <idArg column="f_id" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="user_account" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="friend_account" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="state_notify" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
    f_id, user_account, friend_account, state_notify, create_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from friends
        where f_id = #{fId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from friends
    where f_id = #{fId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.serversocket.entity.Friends">
    insert into friends (user_account, friend_account,
      state_notify, create_time)
    values (#{userAccount,jdbcType=BIGINT}, #{friendAccount,jdbcType=BIGINT},
      #{stateNotify,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.serversocket.entity.Friends">
        insert into friends
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="fId != null">
                f_id,
            </if>
            <if test="userAccount != null">
                user_account,
            </if>
            <if test="friendAccount != null">
                friend_account,
            </if>
            <if test="stateNotify != null">
                state_notify,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="fId != null">
                #{fId,jdbcType=BIGINT},
            </if>
            <if test="userAccount != null">
                #{userAccount,jdbcType=BIGINT},
            </if>
            <if test="friendAccount != null">
                #{friendAccount,jdbcType=BIGINT},
            </if>
            <if test="stateNotify != null">
                #{stateNotify,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.serversocket.entity.Friends">
        update friends
        <set>
            <if test="userAccount != null">
                user_account = #{userAccount,jdbcType=BIGINT},
            </if>
            <if test="friendAccount != null">
                friend_account = #{friendAccount,jdbcType=BIGINT},
            </if>
            <if test="stateNotify != null">
                state_notify = #{stateNotify,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where f_id = #{fId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.serversocket.entity.Friends">
    update friends
    set user_account = #{userAccount,jdbcType=BIGINT},
      friend_account = #{friendAccount,jdbcType=BIGINT},
      state_notify = #{stateNotify,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where f_id = #{fId,jdbcType=BIGINT}
  </update>

    <resultMap id="UserResultMap" type="userinfo">
        <id column="userId" property="userId"/>
        <result column="userAccount" property="userAccount"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="phone" property="phone"/>
        <result column="sex" property="sex"/>
        <result column="headPhoto" property="headPhoto"/>
        <result column="birthday" property="birthday"/>
        <result column="registerTime" property="registerTime"/>
        <result column="modifyTime" property="modifyTime"/>
        <result column="tag" property="tag"/>
    </resultMap>
    <sql id="User_Column_List">
        userId, userAccount, username, password, headPhoto, phone, sex, birthday, registerTime, modifyTime, tag
  </sql>

    <!--根据用户账号获取用户的所有好友-->
    <select id="showFriendsByUserinfoAccount" parameterType="long" resultMap="UserResultMap">
        SELECT
        <include refid="User_Column_List"/>
        from userinfo where userAccount in (
        SELECT friend_account from friends where user_account = #{value} and state_notify = 1
        )
    </select>

    <!--获取添加好友，验证信息-->
    <select id="selectByFriendAccount" parameterType="long" resultMap="UserResultMap">
        select
        <include refid="User_Column_List"/>
        from userinfo where userAccount in(
        select user_account from friends where friend_account = #{value} and state_notify = 0
        )
    </select>

    <update id="updateStateNotifyByUaccountAndFaccount" parameterType="friends">
        update friends
        set state_notify = #{stateNotify,jdbcType=INTEGER}
        where user_account = #{friendAccount,jdbcType=BIGINT} and friend_account = #{userAccount,jdbcType=BIGINT}
    </update>
</mapper>